import streamlit as st
import pickle
import re
from PIL import Image
import os
import json
from pathlib import Path

# ============================================
# –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´
# ============================================
st.set_page_config(
    page_title="–î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================
# CSS –°–¢–ò–õ–ò
# ============================================
def set_background_and_styles():
    st.markdown(
        """
        <style>
        /* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
        .stApp {
            background: rgb(20, 19, 28);
        }
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
        h1 {
            color: #FFFFE0;
            font-weight: 700;
            text-align: center;
            font-size: 3rem;
            margin-bottom: 0.5rem;
        }
        
        h2 {
            color: #FFFFE0;
            font-weight: 600;
        }
        
        h3 {
            color: #FFFFE0;
            font-weight: 600;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ */
        .stButton>button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #FFFFE0;
            border-radius: 7px;
            padding: 0.75rem 3rem;
            font-weight: 600;
            font-size: 1.1rem;
            border: none;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
            transition: all 0.3s ease;
            width: 100%;
        }
        
        .stButton>button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.6);
            background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
        }
        
        .stButton>button:active {
            transform: translateY(0);
        }
        
        /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è */
        .stTextInput>div>div>input {
            border-radius: 7px;
            border: 2px solid #e5e7eb;
            font-size: 1rem;
            padding: 0.75rem;
            transition: all 0.3s ease;
        }
        
        .stTextInput>div>div>input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        /* –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å */
        .stTextArea>div>div>textarea {
            border-radius: 7px;
            border: 2px solid #e5e7eb;
            font-size: 1rem;
            padding: 0.75rem;
            transition: all 0.3s ease;
        }
        
        .stTextArea>div>div>textarea:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        /* –ú–µ—Ç–∫–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ */
        .stTextInput>label, .stTextArea>label {
            font-weight: 1000;
            color: #FFFFE0;
            font-size: 1.1rem;
        }
        
        /* Success —Å–æ–æ–±—â–µ–Ω–∏—è */
        .stSuccess {
            background-color: #d1fae5;
            border-left: 5px solid #10b981;
            border-radius: 10px;
            padding: 1rem;
        }
        
        /* Error —Å–æ–æ–±—â–µ–Ω–∏—è */
        .stError {
            background-color: #fee2e2;
            border-left: 5px solid #ef4444;
            border-radius: 10px;
            padding: 1rem;
        }
        
        /* Warning —Å–æ–æ–±—â–µ–Ω–∏—è */
        .stWarning {
            background-color: #fef3c7;
            border-left: 5px solid #f59e0b;
            border-radius: 10px;
            padding: 1rem;
        }
        
        /* Info —Å–æ–æ–±—â–µ–Ω–∏—è */
        .stInfo {
            background-color: #dbeafe;
            border-left: 5px solid #3b82f6;
            border-radius: 10px;
            padding: 1rem;
        }
        
        /* –°–∞–π–¥–±–∞—Ä */
        [data-testid="stSidebar"] {
            background: #0e1117;
        }
        
        [data-testid="stSidebar"] [data-testid="stMarkdownContainer"] {
            color: white;
        }
        
        [data-testid="stSidebar"] h1, 
        [data-testid="stSidebar"] h2, 
        [data-testid="stSidebar"] h3 {
            color: white;
        }
        
        /* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ */
        hr {
            margin-top: 2rem;
            margin-bottom: 2rem;
            border: none;
            border-top: 2px solid #e5e7eb;
        }
        
        /* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ */
        .info-card {
            background-color: #f8fafc;
            border-radius: 15px;
            padding: 1.5rem;
            margin: 1rem 0;
            border: 1px solid #e2e8f0;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
        
        .metric-container {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
            margin: 1rem 0;
        }
        
        .metric-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: #0369a1;
        }

        .stImage.round-logo img {
            border-radius: 50%;
        }
        .stImage.default-img img {
            border-radius: 0 !important;
        }

        .metric-label {
            font-size: 1rem;
            color: #64748b;
            margin-top: 0.5rem;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
set_background_and_styles()

# ============================================
# –§–£–ù–ö–¶–ò–ò –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ò
# ============================================
def load_metrics():
    path = Path("results/metrics/metrics.json")
    if path.exists():
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

metrics = load_metrics()
if metrics:
    best_model_name = metrics["best_model_name"]
    best_acc = metrics["val_accuracy"]
    best_f1 = metrics["val_f1"]
else:
    best_model_name, best_acc, best_f1 = None, None, None

import nltk
from nltk.corpus import stopwords
import streamlit as st

@st.cache_data(show_spinner=False)
def ensure_nltk_stopwords():
    try:
        # –ü—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        _ = stopwords.words('russian')
    except LookupError:
        nltk.download('stopwords')
    return stopwords.words('russian')

@st.cache_data(show_spinner=False)
def load_stopwords():
    return ensure_nltk_stopwords()

def preprocess_text(text, stopwords_list):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    if not isinstance(text, str) or len(text) == 0:
        return ""
    
    text = text.lower()
    text = re.sub(r'http\S+|www\S+|https\S+', '', text)
    text = re.sub(r'\S+@\S+', '', text)
    text = re.sub(r'<.*?>', '', text)
    text = re.sub(r'[^–∞-—è—ë\s]', ' ', text)
    text = re.sub(r'\s+', ' ', text).strip()
    
    words = text.split()
    words = [word for word in words if word not in stopwords_list and len(word) > 2]
    
    return ' '.join(words)

# ============================================
# –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò
# ============================================
@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        model = pickle.load(open('models/fake_news_detector.pkl', 'rb'))
        vectorizer = pickle.load(open('models/tfidf_vectorizer.pkl', 'rb'))
        return model, vectorizer, True
    except FileNotFoundError:
        return None, None, False

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model, vectorizer, model_loaded = load_model()
stopwords_list = load_stopwords()

# ============================================
# –°–ê–ô–î–ë–ê–†
# ============================================
with st.sidebar:

    # –õ–æ–≥–æ—Ç–∏–ø
    logo = Image.open('assets/logo.png')
    st.image(logo, use_column_width=True, output_format="round-logo")
    
    st.markdown("---")
    
    st.markdown(
        """
        <div style='color: #FFFFE0;'>
            <h3 style='color: #FFFFE0;'>–û –ø—Ä–æ–µ–∫—Ç–µ</h3>
            <p>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª—é–±—É—é –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å, 
            –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–∏–≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫  –∏ —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ–ø–æ–≤–æ–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    st.markdown("---")
    
    if model_loaded:
        st.markdown(
            """
            <div style='color: #FFFFE0;'>
                <h4 style='color: #FFFFE0;'>‚úÖ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏</h4>
                <p>–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ</p>
            </div>
            """,
            unsafe_allow_html=True
        )
    else:
        st.markdown(
            """
            <div style='color: #FFFFE0;'>
                <h4 style='color: #FFFFE0;'>‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏</h4>
                <p>–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</p>
            </div>
            """,
            unsafe_allow_html=True
        )
    
    st.markdown("---")
    
    st.markdown(
        """
        <div style='color: #FFFFE0;'>
            <h4 style='color: #FFFFE0;'>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
            <ul>
                <li><strong>–ú–æ–¥–µ–ª—å:</strong> {model}</li>
                <li><strong>–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</strong> TF-IDF</li>
                <li><strong>Score –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ (accuracy):</strong> {accuracy_score:.3f}</li>
            </ul>
        </div>
        """.format(model=best_model_name, accuracy_score=best_acc),
        unsafe_allow_html=True
    )

# ============================================
# –ì–õ–ê–í–ù–´–ô –ö–û–ù–¢–ï–ù–¢
# ============================================

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title('üîç –î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π')

st.markdown(
    """
    <div style='text-align: center; color: #FFFFE0; font-size: 1.2rem; margin-bottom: 2rem;'>
        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
    </div>
    """,
    unsafe_allow_html=True
)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.expander("üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?", expanded=False):
    st.markdown("""
    1. –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
    2. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤–æ –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ
    3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å**
    4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    """)

st.markdown("<br>", unsafe_allow_html=True)

# –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
with st.container():
    headline = st.text_input(
        'üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:',
        placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∞–Ω–∫ –†–æ—Å—Å–∏–∏ —Å–Ω–∏–∑–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 17%',
        help='–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å'
    )
    
    body = st.text_area(
        'üìÑ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:',
        height=250,
        placeholder='–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –µ—ë –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å...',
        help='–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
    )
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        check_button = st.button('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', use_container_width=True)

st.markdown("<br>", unsafe_allow_html=True)

# ============================================
# –û–ë–†–ê–ë–û–¢–ö–ê –ò –†–ï–ó–£–õ–¨–¢–ê–¢–´
# ============================================
if check_button:
    if not headline or not body:
        st.warning('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏')
    else:
        with st.spinner('üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç—å...'):
            try:
                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
                headline_clean = preprocess_text(headline, stopwords_list)
                body_clean = preprocess_text(body, stopwords_list)
                
                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º
                body_words = body_clean.split()
                combined_text = f"{headline_clean} {' '.join(body_words)}"
                
                if len(combined_text) < 10:
                    st.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.')
                else:
                    # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    text_vec = vectorizer.transform([combined_text])
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    prediction = model.predict(text_vec)[0]
                    probabilities = model.predict_proba(text_vec)[0]
                    
                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    st.markdown("---")
                    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
                    
                    if prediction == 1:
                        # –†–µ–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
                        confidence = probabilities[1] * 100
                        st.success(f'‚úÖ **–†–ï–ê–õ–¨–ù–ê–Ø –ù–û–í–û–°–¢–¨**')
                        
                        st.markdown(
                            f"""
                            <div class='metric-container'>
                                <div class='metric-value'>{confidence:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        
                        st.info("""
                        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Å—Ç–∞—Ç—å–∏. 
                        –ù–æ–≤–æ—Å—Ç—å —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —è–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–π.
                        """)
                        
                    else:
                        # –§–µ–π–∫–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å
                        confidence = probabilities[0] * 100
                        st.error(f'‚ùå **–§–ï–ô–ö–û–í–ê–Ø –ù–û–í–û–°–¢–¨**')
                        
                        st.markdown(
                            f"""
                            <div class='metric-container' style='background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);'>
                                <div class='metric-value' style='color: #b91c1c;'>{confidence:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        
                        st.warning("""
                        **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Å—Ç–∞—Ç—å–∏. 
                        –ù–æ–≤–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–π –∏–ª–∏ –≤–≤–æ–¥–∏—Ç—å –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ.
                        """)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    with st.expander("üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                        st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:**")
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("–§–µ–π–∫–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å", f"{probabilities[0]:.2f}")
                        with col2:
                            st.metric("–†–µ–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å", f"{probabilities[1]:.2f}")
                        
                        st.write("**–î–ª–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:**")
                        st.write(f"- –°–ª–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: {len(headline_clean.split())}")
                        st.write(f"- –°–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ): {len(body_words)}")
                        st.write(f"- –í—Å–µ–≥–æ —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(combined_text.split())}")

  
            except Exception as e:
                st.error(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}')
                # –ì—Ä–∞—Ñ–∏–∫–∏
with st.expander("ü§ñ –†–∞–±–æ—Ç–∞ –º–æ–¥–µ–ª–µ–π"):
    st.image("assets/fake_news_analysis.png", caption="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", use_column_width=True, output_format="default-img")
    st.image("assets/wordcloud_vectorized.png", caption="–û–±–ª–∞–∫–æ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤", use_column_width=True, output_format="default-img")