import os
import re
import pickle
import numpy as np
import streamlit as st
from PIL import Image
from gensim.models import KeyedVectors
import nltk
import json

with open("results/metrics/metrics.json", "r", encoding="utf-8") as f:
    metrics = json.load(f)

st.set_page_config(page_title="–î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π", page_icon="üîç", layout="wide")

def set_styles():
    st.markdown("""
    <style>
                
    .stApp { 
        background: rgb(20, 19, 28);
    }
                
    h1 { 
        color: #FFFFE0; font-weight: 700; text-align: center; font-size: 3rem; margin-bottom: 0.5rem; 
    }
                
    h2, h3 { 
        color: #FFFFE0; font-weight: 600; 
    }
                
    .stButton>button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: #FFFFE0; border-radius: 7px; padding: 0.75rem 3rem; font-weight: 600;
        font-size: 1.1rem; border: none; box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        transition: all 0.3s ease; width: 100%;
    }
                
    .stButton>button:hover {
        transform: translateY(-2px); box-shadow: 0 8px 20px rgba(102, 126, 234, 0.6);
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
    }
                
    .stTextInput>div>div>input, .stTextArea>div>div>textarea {
        border-radius: 7px; border: 2px solid #e5e7eb; font-size: 1rem; padding: 0.75rem; transition: all 0.3s ease;
    }
                
    .stTextInput>div>div>input:focus, .stTextArea>div>div>textarea:focus {
        border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
                
    .stTextInput>label, .stTextArea>label { 
        font-weight: 1000; color: #FFFFE0; font-size: 1.1rem; 
    }
                
    [data-testid="stSidebar"] { 
        background: #0e1117; 
    }
                
    [data-testid="stSidebar"] [data-testid="stMarkdownContainer"] { 
        color: white;
    }
                
    .metric-container { 
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%); border-radius: 12px; padding: 0.1rem; text-align: center; margin: 0.1rem; 
    }
    
    .metric-value {
        font-size: 2.5rem; font-weight: 700; color: #0369a1; margin-top: 0.1rem;
    }
    
    .metric-label {
        font-size: 1rem; color: #64748b;
    }
    
    .stImage.round-logo img {
        border-radius: 50%;
    }
    
    .stImage.default-img img {
        border-radius: 0;
    }
    
    .streamlit-expanderHeader {
        color: #FFFFE0; font-weight: 600;
    }
    
    </style>
    """, unsafe_allow_html=True)

set_styles()

@st.cache_data
def load_stopwords():
    from nltk.corpus import stopwords

    nltk.download('stopwords')
    return set(stopwords.words('russian'))

def preprocess_text(text, stopwords_list):
    if not isinstance(text, str):
        return ""
    t = text.lower()
    t = re.sub(r'http\S+|www\S+|https\S+', '', t)
    t = re.sub(r'\S+@\S+', '', t)
    t = re.sub(r'<.*?>', '', t)
    t = re.sub(r'[^–∞-—è—ëa-z0-9\s]', ' ', t)
    t = re.sub(r'\s+', ' ', t).strip()
    toks = [w for w in t.split() if w not in stopwords_list and len(w) > 2]
    return " ".join(toks)

STOPWORDS = load_stopwords()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
@st.cache_resource
def load_artifacts():
    clf = None; kv = None; metrics = None

    if os.path.exists("models/fake_news_w2v_lr.pkl"):
        with open("models/fake_news_w2v_lr.pkl", "rb") as f:
            clf = pickle.load(f)

    if os.path.exists("models/w2v_vectors.kv"):
        kv = KeyedVectors.load("models/w2v_vectors.kv")

    if os.path.exists("models/metrics.pkl"):
        with open("models/metrics.pkl", "rb") as f:
            metrics = pickle.load(f)
    
    return clf, kv, metrics

clf, kv, train_metrics = load_artifacts()


def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        model_randfor_tf = pickle.load(open('models/Random Forest_model_tf.pkl', 'rb'))
        model_naibayes_tf = pickle.load(open('models/Naive Bayes_model_tf.pkl', 'rb'))
        model_logreg_tf = pickle.load(open('models/Logistic Regression_model_tf.pkl', 'rb'))
        vectorizer_tf = pickle.load(open('models/tfidf_vectorizer_tf.pkl', 'rb'))
        return model_randfor_tf, model_naibayes_tf, model_logreg_tf, vectorizer_tf, True
    except FileNotFoundError:
        return None, None, False

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model_randfor_tf, model_naibayes_tf, model_logreg_tf, vectorizer_tf, model_loaded = load_model()
stopwords_list = load_stopwords()

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
def doc_vector(tokens, kv_model):
    vecs = [kv_model[w] for w in tokens if w in kv_model]

    if not vecs:
        return np.zeros(kv_model.vector_size, dtype=np.float32)
    
    return np.vstack(vecs).mean(axis=0)

def cosine(u, v):
    nu, nv = np.linalg.norm(u), np.linalg.norm(v)

    if nu == 0 or nv == 0:
        return 0.0
    
    return float(np.dot(u, v) / (nu * nv))

def jaccard(a_tokens, b_tokens):
    A, B = set(a_tokens), set(b_tokens)

    if not A and not B:
        return 0.0
    
    return len(A & B) / max(1, len(A | B))

def overlap_ratio(a_tokens, b_tokens):
    A, B = set(a_tokens), set(b_tokens)
    
    return 0.0 if not A else len(A & B) / len(A)

def build_feature_vector(headline_clean, body_clean, kv_model, max_len=150):
    htoks = headline_clean.split()[:max_len]
    btoks = body_clean.split()[:max_len]

    h_vec = doc_vector(htoks, kv_model)
    b_vec = doc_vector(btoks, kv_model)

    cos_sim = cosine(h_vec, b_vec)
    jacc = jaccard(htoks, btoks)
    ovr = overlap_ratio(htoks, btoks)
    diff = np.abs(h_vec - b_vec)
    prod = h_vec * b_vec
    l2 = np.linalg.norm(h_vec - b_vec)

    feats = np.hstack([h_vec, b_vec, diff, prod, [cos_sim, jacc, ovr, l2]])
    return feats, {"cosine": cos_sim, "jaccard": jacc, "overlap": ovr, "l2": l2}

def predict(headline_raw, body_raw, clf_model, kv_model):
    headline_clean = preprocess_text(headline_raw, STOPWORDS)
    body_clean = preprocess_text(body_raw, STOPWORDS)
    
    if len(headline_clean) < 2 or len(body_clean) < 5:
        return None, None, headline_clean, body_clean, None
    
    X, rel = build_feature_vector(headline_clean, body_clean, kv_model)
    X = X.reshape(1, -1)
    
    prob = clf_model.predict_proba(X)[0]
    pred = int(clf_model.predict(X)[0])
    
    return pred, prob, headline_clean, body_clean, rel

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞
DEFAULT_THRESHOLDS = {
    "proba_real": 0.55,   
    "cos_min": 0.20,      
    "jacc_min": 0.005,     
    "overlap_min": 0.10,  
    "l2_max": 14.0,       
}
HARD_RULES = {
    "very_low_cos": 0.10,
    "zero_overlap": 0.00,
}

def decide_with_rules(prob_real, rel, thresholds=DEFAULT_THRESHOLDS, hard_rules=HARD_RULES):
    reasons = []

    if rel["cosine"] < hard_rules["very_low_cos"]:
        reasons.append(f"–ù–∏–∑–∫–∞—è –∫–æ—Å–∏–Ω—É—Å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å (cosine): {rel['cosine']:.3f}")
        return 0, reasons
    
    if rel["overlap"] <= hard_rules["zero_overlap"]:
        reasons.append("–í –∑–∞–≥–æ–ª–æ–≤–∫–µ –Ω–µ—Ç —Å–ª–æ–≤, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –≤ —Ç–µ–∫—Å—Ç–µ (overlap=0)")
        return 0, reasons

    soft_ok = True
    if rel["cosine"] < thresholds["cos_min"]:
        soft_ok = False; reasons.append(f"cosine –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ({rel['cosine']:.3f} < {thresholds['cos_min']})")
    
    if rel["jaccard"] < thresholds["jacc_min"]:
        soft_ok = False; reasons.append(f"Jaccard –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ({rel['jaccard']:.3f} < {thresholds['jacc_min']})")
    
    if rel["overlap"] < thresholds["overlap_min"]:
        soft_ok = False; reasons.append(f"overlap –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ({rel['overlap']:.3f} < {thresholds['overlap_min']})")
    
    if rel["l2"] > thresholds["l2_max"]:
        soft_ok = False; reasons.append(f"L2 –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ ({rel['l2']:.3f} > {thresholds['l2_max']})")

    if prob_real >= thresholds["proba_real"] and soft_ok:
        return 1, reasons
    else:
    
        if prob_real >= thresholds["proba_real"]:
            reasons.append(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤—ã—Å–æ–∫–∞—è ({prob_real*100:.1f}%), –Ω–æ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º –Ω–µ—Ç")
    
        return 0, reasons

# –°–∞–π–¥–±–∞—Ä
with st.sidebar:
    logo = Image.open('assets/logo.png')
    st.image(logo, output_format="round-logo")

    st.markdown("---")
    st.markdown(
        """
        <div style='color: #FFFFE0;'>
            <h3 style='color: #FFFFE0;'>–û –ø—Ä–æ–µ–∫—Ç–µ</h3>
            <p>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏, —Å–∞–π—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç,
            —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–Ω—Ñ–æ–ø–æ–≤–æ–¥ –ø–æ–¥–ª–∏–Ω–Ω—ã–º.</p>
            </p>–ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –∏ Word2Vec. –ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown("---")
    
    if kv is not None:
        st.markdown("<div style='color:#FFFFE0;'><h4>–°—Ç–∞—Ç—É—Å Word2Vec:</h4><p>–ú–æ–¥–µ–ª–∏ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p></div>", unsafe_allow_html=True)
    else:
        st.markdown("<div style='color:#FFFFE0;'><h4>–°—Ç–∞—Ç—É—Å Word2Vec:</h4><p>–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –∏–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ models</p></div>", unsafe_allow_html=True)

    if model_loaded:
        st.markdown("<div style='color:#FFFFE0;'><h4>–°—Ç–∞—Ç—É—Å TF-IDF:</h4><p>–ú–æ–¥–µ–ª–∏ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p></div>", unsafe_allow_html=True)
    else:
        st.markdown("<div style='color:#FFFFE0;'><h4>–°—Ç–∞—Ç—É—Å TF-IDF:</h4><p>–ù–µ—Ç –º–æ–¥–µ–ª–µ–π –∏–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ models</p></div>", unsafe_allow_html=True)

    st.markdown("---")
    # if train_metrics:
    #     st.markdown(
    #         f"""
    #         <div style='color:#FFFFE0;'>
    #             <h4>–ú–µ—Ç—Ä–∏–∫–∏:</h4>
    #             <ul>
    #                 <li><strong>–ú–æ–¥–µ–ª—å:</strong> {train_metrics.get("best_model_name","Logistic Regression + Word2Vec")}</li>
    #                 <li><strong>Val Accuracy:</strong> {train_metrics.get("val_accuracy","-"):.3f}</li>
    #                 <li><strong>Val F1:</strong> {train_metrics.get("val_f1","-"):.3f}</li>
    #             </ul>
    #         </div>
    #         """,
    #         unsafe_allow_html=True
    #     )

# –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
st.title('–î–µ—Ç–µ–∫—Ç–æ—Ä —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π')

st.markdown("""
    <style>
    div[data-testid="stExpander"] div[role="button"] {
        background-color: #2e86de;
        color: white;
        border-radius: 5px;
    }
    div[data-testid="stExpander"] div[role="region"] {
        background-color: #dff9fb;
    }
    </style>
""", unsafe_allow_html=True)
with st.expander("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?", expanded=False):
    st.markdown("""<div style='color:#FFFFE0;'>
    1. –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
    </div>""", unsafe_allow_html=True)
    st.markdown("""<div style='color:#FFFFE0;'>
    2. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤–æ –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ
    </div>""", unsafe_allow_html=True)
    st.markdown("""<div style='color:#FFFFE0;'>
    3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"
    </div>""", unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)
 
with st.container():
    headline = st.text_input('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:', placeholder='–í—Å—Ç–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏')
    body = st.text_area('–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:', height=250, placeholder='–í—Å—Ç–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏')
    c1, c2, c3 = st.columns([1, 2, 1])
    
    with c2:
        check_button = st.button('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', use_container_width=True)

st.markdown("<br>", unsafe_allow_html=True)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

if check_button:
    st.markdown("---")
    if not headline or not body:
        st.warning('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏')
    else:
        with st.spinner('üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç—å...'):
            try:
                with open("models/logisticregression_model.pkl", "rb") as f:
                    clf_lr = pickle.load(f)
                with open("models/randomforest_model.pkl", "rb") as f:
                    clf_rf = pickle.load(f)

                # prediction –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
                pred_lr, prob_lr, h_clean, b_clean, rel_lr = predict(headline, body, clf_lr, kv)
                pred_rf, prob_rf, _, _, rel_rf = predict(headline, body, clf_rf, kv)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
                final_label_lr, reasons_lr = decide_with_rules(prob_lr[1], rel_lr)
                final_label_rf, reasons_rf = decide_with_rules(prob_rf[1], rel_rf)
                
                # =================================
                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã Word2Vec
                # =================================
                st.markdown("### Word2Vec")
                col1, col2 = st.columns(2)

                # Logistic Regression
                with col1:
                    if final_label_lr == 1:
                        st.success('‚úÖ **–†–ï–ê–õ–¨–ù–ê–Ø –ù–û–í–û–°–¢–¨**')
                        st.markdown(
                            f"""
                            <div class='metric-container'>
                                <div class='metric-label'>Logistic Regression</div>
                                <div class='metric-value'>{prob_lr[1]*100:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        
                        # with st.expander("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"):
                        #     if rel:
                        #         c1, c2, c3, c4 = st.columns(4)
                        #         c1.metric("Cosine", f"{rel['cosine']:.3f}")
                        #         c2.metric("Jaccard", f"{rel['jaccard']:.3f}")
                        #         c3.metric("Overlap", f"{rel['overlap']:.3f}")
                        #         c4.metric("L2(h-b)", f"{rel['l2']:.3f}")

                        #     st.markdown("**–¢–µ–∫—Å—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:**")
                        #     st.write(f"- –ó–∞–≥–æ–ª–æ–≤–æ–∫: {h_clean}")
                        #     show_body = (' '.join(b_clean.split()[:120]) + ' ...') if len(b_clean.split())>120 else b_clean
                        #     st.write(f"- –¢–µ–∫—Å—Ç: {show_body}") 

                    else:
                        st.error('‚ùå **–§–ï–ô–ö–û–í–ê–Ø –ù–û–í–û–°–¢–¨**')
                        st.markdown(
                            f"""
                            <div class='metric-container' style='background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);'>
                                <div class='metric-label'>Logistic Regression</div>
                                <div class='metric-value' style='color: #b91c1c;'>{(1-prob_lr[1])*100:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        if reasons_lr:
                            with st.expander("–ü–æ—á–µ–º—É —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞?"):
                                for r in reasons_lr:
                                    st.write(f"- {r}")
                        # with st.expander("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"):
                        #     if rel:
                        #         c1, c2, c3, c4 = st.columns(4)
                        #         c1.metric("Cosine", f"{rel['cosine']:.3f}")
                        #         c2.metric("Jaccard", f"{rel['jaccard']:.3f}")
                        #         c3.metric("Overlap", f"{rel['overlap']:.3f}")
                        #         c4.metric("L2(h-b)", f"{rel['l2']:.3f}")

                        #     st.markdown("**–¢–µ–∫—Å—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:**")
                        #     st.write(f"- –ó–∞–≥–æ–ª–æ–≤–æ–∫: {h_clean}")
                        #     show_body = (' '.join(b_clean.split()[:120]) + ' ...') if len(b_clean.split())>120 else b_clean
                        #     st.write(f"- –¢–µ–∫—Å—Ç: {show_body}") 

                # Random Forest
                with col2:
                    if final_label_rf == 1:
                        st.success('‚úÖ **–†–ï–ê–õ–¨–ù–ê–Ø –ù–û–í–û–°–¢–¨**')
                        st.markdown(
                            f"""
                            <div class='metric-container'>
                                <div class='metric-label'>Random Forest</div>
                                <div class='metric-value'>{prob_rf[1]*100:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        # with st.expander("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"):
                        #     if rel:
                        #         c1, c2, c3, c4 = st.columns(4)
                        #         c1.metric("Cosine", f"{rel['cosine']:.3f}")
                        #         c2.metric("Jaccard", f"{rel['jaccard']:.3f}")
                        #         c3.metric("Overlap", f"{rel['overlap']:.3f}")
                        #         c4.metric("L2(h-b)", f"{rel['l2']:.3f}")

                        #     st.markdown("**–¢–µ–∫—Å—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:**")
                        #     st.write(f"- –ó–∞–≥–æ–ª–æ–≤–æ–∫: {h_clean}")
                        #     show_body = (' '.join(b_clean.split()[:120]) + ' ...') if len(b_clean.split())>120 else b_clean
                        #     st.write(f"- –¢–µ–∫—Å—Ç: {show_body}")                        
                        
                    else:
                        st.error('‚ùå **–§–ï–ô–ö–û–í–ê–Ø –ù–û–í–û–°–¢–¨**')
                        st.markdown(
                            f"""
                            <div class='metric-container' style='background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);'>
                                <div class='metric-label'>Random Forest</div>
                                <div class='metric-value' style='color: #b91c1c;'>{(1-prob_rf[1])*100:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        if reasons_rf:
                            with st.expander("–ü–æ—á–µ–º—É —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞?"):
                                for r in reasons_rf:
                                    st.write(f"- {r}")
                        # with st.expander("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"):
                        #     if rel:
                        #         c1, c2, c3, c4 = st.columns(4)
                        #         c1.metric("Cosine", f"{rel['cosine']:.3f}")
                        #         c2.metric("Jaccard", f"{rel['jaccard']:.3f}")
                        #         c3.metric("Overlap", f"{rel['overlap']:.3f}")
                        #         c4.metric("L2(h-b)", f"{rel['l2']:.3f}")

                        #     st.markdown("**–¢–µ–∫—Å—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏:**")
                        #     st.write(f"- –ó–∞–≥–æ–ª–æ–≤–æ–∫: {h_clean}")
                        #     show_body = (' '.join(b_clean.split()[:120]) + ' ...') if len(b_clean.split())>120 else b_clean
                        #     st.write(f"- –¢–µ–∫—Å—Ç: {show_body}")


                # =================================
                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ TF-IDF
                # =================================

                headline_clean = preprocess_text(headline, stopwords_list)
                body_clean = preprocess_text(body, stopwords_list)
                
                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º
                body_words = body_clean.split()
                combined_text = f"{headline_clean} {' '.join(body_words)}"

                text_vec = vectorizer_tf.transform([combined_text])
                
                # –ø—Ä–µ–¥–∏–∫—Ç—ã –Ω–∞ random forest
                prediction_rf = model_randfor_tf.predict(text_vec)[0]
                probabilities_rf = model_randfor_tf.predict_proba(text_vec)[0]

                # –ø—Ä–µ–¥–∏–∫—Ç—ã –Ω–∞ naive bayes
                prediction_nb = model_naibayes_tf.predict(text_vec)[0]
                probabilities_nb = model_naibayes_tf.predict_proba(text_vec)[0]  

                # –ø—Ä–µ–¥–∏–∫—Ç—ã –Ω–∞ logistic regression
                prediction_lr = model_logreg_tf.predict(text_vec)[0]
                probabilities_lr = model_logreg_tf.predict_proba(text_vec)[0]  

                st.markdown("### TF-IDF")

                col1, col2, col3 = st.columns(3)

                # random forest
                with col1:
                    if prediction_rf == 1:
                        # –†–µ–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
                        confidence = probabilities_rf[1] * 100
                        st.success(f'‚úÖ **–†–ï–ê–õ–¨–ù–ê–Ø –ù–û–í–û–°–¢–¨**')
                        
                        st.markdown(
                            f"""
                            <div class='metric-container'>
                                <div class='metric-label'>Random Forest</div>
                                <div class='metric-value'>{confidence:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                                <div class='metric-label'><strong>Val Accuracy:</strong> {metrics["Random Forest"]["val_acc"]:.3f}</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        
                    else:
                        # –§–µ–π–∫–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å
                        confidence = probabilities_rf[0] * 100
                        st.error(f'‚ùå **–§–ï–ô–ö–û–í–ê–Ø –ù–û–í–û–°–¢–¨**')
                        
                        st.markdown(
                            f"""
                            <div class='metric-container' style='background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);'>
                                <div class='metric-label'>Random Forest</div>
                                <div class='metric-value' style='color: #b91c1c;'>{confidence:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                                <div class='metric-label'><strong>Val Accuracy:</strong> {metrics["Random Forest"]["val_acc"]:.3f}</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )

                # naive bayes
                with col2:
                    if prediction_nb == 1:
                        # –†–µ–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
                        confidence = probabilities_nb[1] * 100
                        st.success(f'‚úÖ **–†–ï–ê–õ–¨–ù–ê–Ø –ù–û–í–û–°–¢–¨**')
                        
                        st.markdown(
                            f"""
                            <div class='metric-container'>
                                <div class='metric-label'>Naive Bayes</div>
                                <div class='metric-value'>{confidence:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                                <div class='metric-label'><strong>Val Accuracy:</strong> {metrics["Naive Bayes"]["val_acc"]:.3f}</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )                        
                        
                    else:
                        # –§–µ–π–∫–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å
                        confidence = probabilities_nb[0] * 100
                        st.error(f'‚ùå **–§–ï–ô–ö–û–í–ê–Ø –ù–û–í–û–°–¢–¨**')
                        
                        st.markdown(
                            f"""
                            <div class='metric-container' style='background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);'>
                                <div class='metric-label'>Naive Bayes</div>
                                <div class='metric-value' style='color: #b91c1c;'>{confidence:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                                <div class='metric-label'><strong>Val Accuracy:</strong> {metrics["Naive Bayes"]["val_acc"]:.3f}</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )

                # logistic regression
                with col3:
                    if prediction_lr == 1:
                        # –†–µ–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
                        confidence = probabilities_lr[1] * 100
                        st.success(f'‚úÖ **–†–ï–ê–õ–¨–ù–ê–Ø –ù–û–í–û–°–¢–¨**')
                        
                        st.markdown(
                            f"""
                            <div class='metric-container'>
                                <div class='metric-label'>Logistic Regression</div>
                                <div class='metric-value'>{confidence:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                                <div class='metric-label'><strong>Val Accuracy:</strong> {metrics["Logistic Regression"]["val_acc"]:.3f}</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        
                    else:
                        # –§–µ–π–∫–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å
                        confidence = probabilities_lr[0] * 100
                        st.error(f'‚ùå **–§–ï–ô–ö–û–í–ê–Ø –ù–û–í–û–°–¢–¨**')
                        
                        st.markdown(
                            f"""
                            <div class='metric-container' style='background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);'>
                                <div class='metric-label'>Logistic Regression</div>
                                <div class='metric-value' style='color: #b91c1c;'>{confidence:.1f}%</div>
                                <div class='metric-label'>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                                <div class='metric-label'><strong>Val Accuracy:</strong> {metrics["Logistic Regression"]["val_acc"]:.3f}</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                    



            except Exception as e:
                st.error(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}')
 
st.markdown("---")

with st.expander("–û–±–∑–æ—Ä –ø–æ–¥—Ö–æ–¥–æ–≤"):
    st.info("–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ TF-IDF")

    st.markdown("–í –Ω–∞—á–∞–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ ***TF-IDF*** –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ. Score –±—ã–ª –ø—Ä–∏–º–µ—Ä–Ω–æ ***0.958***," \
    " –Ω–æ –Ω–µ —É–¥–∞–≤–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏. –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ñ–æ–ø–æ–≤–æ–¥–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏" \
    " –∑–∞–≥–æ–ª–æ–≤–∫–∞, –º–æ–¥–µ–ª—å –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–ª–∞ –Ω–æ–≤–æ—Å—Ç—å, –∫–∞–∫ –ø—Ä–∞–≤–¥–∏–≤—É—é, –∞ –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±—ã–ª–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é." \
    " –í –∏—Ç–æ–≥–µ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ ***Word2Vec***, —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
    
    st.markdown("---")
    st.image("assets/models_scores.png", caption="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")

    st.markdown("–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ —Å—Ä–∞–≤–Ω–∏–ª ***3 –º–æ–¥–µ–ª–∏***:")
    st.markdown("* Logistic Regression")
    st.markdown("* Naive Bayes")
    st.markdown("* Random Forest")
    st.markdown("–ù–∞–∏–±–æ–ª—å—à–∏–π —Å–∫–æ—Ä –≤—ã–¥–∞–ª–∞ ***–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è***, –∫–∞–∫ –≤–∏–¥–Ω–æ –ø–æ –≥—Ä–∞—Ñ–∏–∫–∞–º.")

    st.markdown("---")
    st.image("assets/text_lenght.png", caption="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤")
    
    st.markdown("---")
    st.image("assets/wordcloud_vectorized.png", caption="–û–±–ª–∞–∫–æ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤")


